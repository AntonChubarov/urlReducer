// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLinkStorage is a mock of LinkStorage interface.
type MockLinkStorage struct {
	ctrl     *gomock.Controller
	recorder *MockLinkStorageMockRecorder
}

// MockLinkStorageMockRecorder is the mock recorder for MockLinkStorage.
type MockLinkStorageMockRecorder struct {
	mock *MockLinkStorage
}

// NewMockLinkStorage creates a new mock instance.
func NewMockLinkStorage(ctrl *gomock.Controller) *MockLinkStorage {
	mock := &MockLinkStorage{ctrl: ctrl}
	mock.recorder = &MockLinkStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkStorage) EXPECT() *MockLinkStorageMockRecorder {
	return m.recorder
}

// GetInitialLinkFromStorage mocks base method.
func (m *MockLinkStorage) GetInitialLinkFromStorage(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialLinkFromStorage", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialLinkFromStorage indicates an expected call of GetInitialLinkFromStorage.
func (mr *MockLinkStorageMockRecorder) GetInitialLinkFromStorage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialLinkFromStorage", reflect.TypeOf((*MockLinkStorage)(nil).GetInitialLinkFromStorage), id)
}

// SaveInitialLinkToStorage mocks base method.
func (m *MockLinkStorage) SaveInitialLinkToStorage(url, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInitialLinkToStorage", url, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveInitialLinkToStorage indicates an expected call of SaveInitialLinkToStorage.
func (mr *MockLinkStorageMockRecorder) SaveInitialLinkToStorage(url, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInitialLinkToStorage", reflect.TypeOf((*MockLinkStorage)(nil).SaveInitialLinkToStorage), url, id)
}

// MockStringValidator is a mock of StringValidator interface.
type MockStringValidator struct {
	ctrl     *gomock.Controller
	recorder *MockStringValidatorMockRecorder
}

// MockStringValidatorMockRecorder is the mock recorder for MockStringValidator.
type MockStringValidatorMockRecorder struct {
	mock *MockStringValidator
}

// NewMockStringValidator creates a new mock instance.
func NewMockStringValidator(ctrl *gomock.Controller) *MockStringValidator {
	mock := &MockStringValidator{ctrl: ctrl}
	mock.recorder = &MockStringValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringValidator) EXPECT() *MockStringValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockStringValidator) Validate(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockStringValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockStringValidator)(nil).Validate), arg0)
}

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHasher) Hash(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHasherMockRecorder) Hash(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasher)(nil).Hash), url)
}

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetLink mocks base method.
func (m *MockIService) GetLink(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLink", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLink indicates an expected call of GetLink.
func (mr *MockIServiceMockRecorder) GetLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLink", reflect.TypeOf((*MockIService)(nil).GetLink), arg0)
}

// SaveLink mocks base method.
func (m *MockIService) SaveLink(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLink", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveLink indicates an expected call of SaveLink.
func (mr *MockIServiceMockRecorder) SaveLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLink", reflect.TypeOf((*MockIService)(nil).SaveLink), arg0)
}
